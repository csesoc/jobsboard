openapi: 3.1.0
info:
  title: Jobsboard Backend API
  description: Jobsboard Backend API
  # arbitrary version number 
  version: 0.0.1 

# TODO: what do i put here?
# servers:
#   - 

tags:
  - name: admin 
    description: all admin related routes 
  - name: student
    description: all student related routes 
  - name: company
    description: all company related routes 
  - name: job
    description: all job related routes
  - name: authentification
    description: all authentification related routes
    
paths:
  /admin/jobs/pending:
    get:
      summary: Returns a list of all pending (un-approved or un-rejected) jobs posts
      description: Query the database to find all pending job posts and return them as a list
      tags:
        - admin
      responses:
        200:
          description: A JSON array of job posts 
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          description: Missing parameters or invalid credentials
        
  /jobs/{offset}:
    get:
      summary: Returns a list of all active job posts (paginated)
      description: Query the database to find all active job posts and returns them as a list 
      tags:
        - student
        - job
      responses:
        200: 
          description: A JSON array of job posts 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400: 
          description: Missing parameters or invalid credentials
  
  /job/{jobID}:
    get:
      summary: Return the job post corresponding to jobID
      description: Query the database to find the job post using the jobID and return it
      tags:
        - student
        - job
      parameters:
        - in: path
          name: jobID
          required: true 
          schema:
            type: integer
          description: integer identifier corresponding to a job post 
      responses:
        200:
          description: A JSON object containing a job post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          description: No job corresponds to jobID or database query failed 

  /job/company/hidden:
    get:
      summary: Return all hidden job posts as a list 
      description: Query the database to find all hidden job posts and return them as a list 
      tags:
        - company
        - job
      responses:
        200: 
          description: A JSON array of job posts 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          description: Database query failed
        401:
          description: Invalid Parameters

  /company/{companyID}:
    get:
      summary: Return the company corresponding to companyID
      description: Query the database to find the company corresponding to the companyID and return it
      tags:
        - company 
      parameters:
        - in: path
          name: companyID
          required: true
          schema:
            type: integer
          description: integer identifier corresponding to a company 
      responses:
        200:
          description: A JSON object of a company 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        400:
          description: Failed to find company corresponding to companyID

  /company/{companyID}/jobs:
    get:
      summary: Return a list of all active and verified job posts from a specific company
      description: Query the database to find all the active and verified job posts from the company corresponding to companyID
      tags:
        - jobs
        - company
      parameters:
        - in: path
          name: companyID
          required: true
          schema:
            type: integer
          description: integer identifier corresponding to a company 
      responses:
        200:
          description: A JSON list of job posts 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        400:
          description: Failed to find company corresponding to companyID or database query failed to find their jobs

  /authenticate/student:
    post:
      summary: Authenticate a student's credential
      description: Use the UNSW login system to validate a student's zID and password 
      tags:
        - authentification
        - student
      requestBody:
        $ref: '#/components/requestBodies/StudentLoginBody'
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: API token 
                    example:
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

  /company:
    put:
      summary: Create a company account
      description: Create a company account using the passed in location, name, username and password strings 
      tags:
        - company
      requestBody:
        $ref: '#/components/requestBodies/CreateCompanyBody'
      responses:
        200: 
          description: Company has been successfully created 
        400:
          description: Missing parameters
        409:
          description: Conflicting usernames



components:

  requestBodies:
    StudentLoginBody:
      description: JSON object containing a student's zID and password
      required: true
      content:
          application/json:
            schema:
              type: object 
              properties:
                zID: 
                  type: string 
                password:
                  type: string 
              example:
                zID: z5555555
                password: password

    CreateCompanyBody:
      description: JSON object containing a company's username, password, location and name
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              location:
                type: string
              name:
                type: string
              password:
                type: string
              username:
                type: string
            example:
              location: Sydeny
              name: Projects Incorporated
              username: poggers
              password: password



  schemas:
    StudentDemographic:
      type: string
      enum: [penultimate, final_year, all]
    
    JobMode:
      type: string
      enum: [onsite, hybrid, remote]
    
    JobType:
      type: string
      enum: [intern, grad]

    WorkingRights:
      type: string
      enum: [aus_ctz, aus_perm_res, aus_stud_visa, aus_temp_grad_visa, nz_ctz_and_perm_res, no_wr, all]

    WamRequirements:
      type: string
      enum: [HD, D, C, none]
    
    Job:
      type: object
      properties:
        id: 
          type: integer 
        role:
          type: string
        mode:
          $ref: '#/components/schemas/JobMode'
        studentDemographic:
          type: array
          items:
            $ref: '#/components/schemas/StudentDemographic'
        jobType:
          $ref: '#/components/schemas/JobType'
        workingRights:
          type: array
          items:
            $ref: '#/components/schemas/WorkingRights'
        additionalInfo:
          type: string
        description:
          type: string
        applicationLink:
          type: string
        isPaid:
          type: boolean
        approved:
          type: boolean
        hidden:
          type: boolean
        deleted:
          type: boolean
        adminCreated:
          type: boolean
        expiry:
          type: date
        company: 
          $ref: '#/components/schemas/Company'
        
    Company:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
        description:
          type: string
        logo:
          type: buffer
        sponsor:
          type: boolean
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    
      