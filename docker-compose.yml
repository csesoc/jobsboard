version: '3.8'
services:
  api:
    platform: linux/amd64
    build:
      dockerfile: dev.dockerfile
      context: ./backend
    image: webpersonal.azurecr.io/jb-api:latest
    restart: always
    volumes:
      - ./backend/src:/app/src     # mounts the backend/src folder to the /app/src folder in the container
      - /app/src/node_modules/     # prevent the node_modules folder from being mounted to prevent package incompatibilities
    ports:
      - 8080:8080    # host port 8080 (lhs) is mapped to container port 8080 (rhs)
    expose:
      - 8080         
    links:
      - db           # set db as a dependency of api
    environment:
      - NODE_ENV=development
      - SERVER_PORT=8080
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=mysecretpassword
      - DB_NAME=postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: dev.dockerfile
    image: webpersonal.azurecr.io/jb-frontend:latest
    volumes:
      - ./frontend/src:/app/src
    ports:
      - 3001:3001
    expose:
      - 3001
  frontend-prod:
    build:
      context: ./frontend
    image: webpersonal.azurecr.io/jb-frontend:latest
    volumes:
      - ./frontend/src:/app/src
    ports:
      - 8081:80
    expose:
      - 8081
  db:
    image: postgres:14.5-alpine # this is the image that we want to run (aka app)
    restart: always
    ports:
      - 5432:5432 # we want to expose port `5432` on our computer and map it to 5432 in the container
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - db-data:/var/lib/postgresql/data # mounting a local folder into the container
  test:
    build:
      dockerfile: test.dockerfile
      context: ./backend
    links:
      - db

volumes:
  db-data: {}